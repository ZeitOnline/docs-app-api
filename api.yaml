openapi: 3.0.2
info:
  description: "This is the API description for the ZON-App (iOS and Android)"
  version: "0.2.0"
  title: "ZON App API"
  contact:
    email: "internet-technik@zeit.de"
servers:
  - url: "https://zappi.zeit.de/{version}"
    description: "Production"
    variables:
      version:
        default: "0.2.0"
        enum: # list older still available versions here
          - "0.2.0"
  - url: "https://zappi.staging.zeit.de/{version}"
    description: "Staging"
    variables:
      version:
        default: "0.2.0"
        enum:
          - "0.2.0"

paths:

  /structure:
    get:
      tags:
        - structure
      summary: "Returns tab and menu/submenu configuration for the app UI"
      responses:
        "200":
          # XXX description is required, but really already exists in ..summary
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  tabs:
                    type: array
                    items:
                      oneOf:
                        - $ref: "#/components/schemas/TabDefinitionCpView"
                        - $ref: "#/components/schemas/TabDefinitionWebView"
                        - $ref: "#/components/schemas/TabDefinitionMenuView"
                        - $ref: "#/components/schemas/TabDefinitionStoryView"
              example: {tabs: [
                {id: start, title: Start, type: cpView, icon: iconHouse, subMenu: [
                  {id: homepage, title: Aktuell, type: menuEntryWeb, url: "https://www.zeit.de/index"},
                  {id: ressortPolitik, title: Politik, type: menuEntryNative, cpItem: {id: "{urn:uuid:b4d1e3b1-aac4-4a80-b820-e4093fe24a36}"} },
                  {id: ressortGesellschaft, title: Gesellschaft, type: menuEntryNative, cpItem: {id: "{urn:uuid:c92ad9be-67e0-497d-beee-6c2e063352cc}"} },
                  {id: ressortWirtschaft, title: Wirtschaft, type: menuEntryNative, cpItem: {id: "{urn:uuid:ea13ef02-74f3-4010-8cd7-777327fb881a}"} },
                  {id: ressortWissen, title: Wissen, type: menuEntryNative, cpItem: {id: "{urn:uuid:c84692ca-b0c9-4772-8c6b-85e2abc446e1}"} },
                  {id: ressortKultur, title: Kultur, type: menuEntryNative, cpItem: {id: "{urn:uuid:49b109f0-bbad-495e-8a88-ad91ec1ef8f9}"} }
                ]},
                {id: news, title: Schlagzeilen, type: cpView, icon: iconClock, subMenu: [
                  {id: newsAll, title: "Alle Schlagzeilen", type: menuEntryNative, cpItem: {id: "{urn:uuid:08945d5e-483c-4e7b-9843-69a8f590ada9}"} },
                  {id: newsMostImportant, title: "Die wichtigsten Nachrichten", type: menuEntryNative, cpItem: {id: "{urn:uuid:df60a52c-5f4d-4804-833d-ec31e24dbd43}"} },
                  {id: newsAnalysisAndReports, title: "Analysen und Hintergründe", type: menuEntryNative, cpItem: {id: "{urn:uuid:d6913463-1804-466d-b6d0-34376ef21916}"} }
                ]},
                {id: discover, title: Entdecken, type: storyView, icon: iconCompass},
                {id: zplus, title: Mein Abo, type: cpView, icon: iconZPlus, subMenu: [
                  {id: exclusive, title: "Exklusive Artikel", type: menuEntryNative, cpItem: {id: "{urn:uuid:0fd9480f-1b52-4fcb-942e-8089e378102e}"} },
                  {id: zeitPDFWebReader, title: "DIE ZEIT", type: menuEntryWeb, url: "https://epaper.zeit.de/abo/diezeit" },
                  {id: wochenMarkt, title: "Wochenmarkt", type: menuEntryWeb, url: "https://www.zeit.de/wochenmarkt" }
                ]},
                {id: menu, title: Mehr, type: menuView, icon: iconAvatar, sections: [
                  {id: user-menu, title: "Mein Bereich", entries: [
                    {id: reading-list, title: Merkliste, type: menuEntryNative, targetId: native-reading-list},
                    {id: reading-history, title: Verlauf, type: menuEntryNative, targetId: native-reading-history},
                    {id: comment-list, title: Kommentare, type: menuEntryWeb, url: "https://profile.zeit.de"}
                  ]}
                ]}
              ]}


  /cp/{uuid}:
    get:
      parameters:
        - in: path
          name: uuid
          schema:
            $ref: "#/components/schemas/uuid"
          required: true
          description: "UUID from CMS that identifies a CenterPage content object"

      tags:
        - cp
      summary: "Returns the teasers (i.e. content references) on a CenterPage"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/uuid"
                  url:
                    type: string
                    # format: uri  XXX only supported in openapi-3.1
                    description: "Web URL for this CenterPage"
                    example: "https://www.zeit.de/politik/index"
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/CenterpageRegion"
        "404":
          description: "No centerpage found for the given uuid"


components:
  schemas:
    uuid:
      type: string
      pattern: "^(\\{urn:uuid:[-a-f0-9]+\\}|[-a-z0-9/]+)$"
      description: "CMS UUID that denotes a content object. For testing/development, a CMS path is also accepted."
      example: "{urn:uuid:d995ba5a-a7fb-401a-bdc8-86cf2cbf0cda}"

    cp_element_id:
      type: string
      pattern: "^id-[-a-f0-9]+$"
      description: "ID of the cp element"

    cp_element_type:
      type: string
      enum:
        - region
        - area
        - teaser
        - teaser-gallery
        - teaser-video
        - teaser-podcast
        - html
      description: "Type of the cp element"

    image:
      type: object
      properties:
        base_url:
          type: string
          # format: uri
          example: "https://img.zeit.de/2020-08/flightradar-4/cinema"
        ratio:
          type: number
          example: 1.7778
        mobile_ratio:
          type: number
          nullable: true
          example: 1.3333
        fill_color:
          type: string
          nullable: true
          example: "8ed8a6"
        force_mobile:
          type: boolean
          example: false

    audio_connection:
      properties:
        id:
          type: string
          enum:
            - itunes
            - spotify
            - deezer
            - alexa
        url:
          type: string
          # format: uri
          example: "https://podcasts.apple.com/podcast/id1279335230"

    CenterpageElement:
      required:
        - id
        - type
      properties:
        id:
          $ref: "#/components/schemas/cp_element_id"
        type:
          $ref: "#/components/schemas/cp_element_type"
    CenterpageTeaserBase:
      description: "A teaser module references/represents a content object (article, video, etc.)"
      allOf:
        - $ref: "#/components/schemas/CenterpageElement"
        - required:
            - layout
            - title
            - url
            - dateFirstPublished
            - dateLastPublishedSemantic
          properties:
            layout:
              type: string
              # @check https://vivi.zeit.de/repository/data/cp-layouts.xml
              enum:
                - zon-teaser-standard
                - zon-teaser-wide
                - zon-teaser-square-author
                - zon-teaser-poster
                # news-teaser
              description: "How to display this teaser (e.g large/small)"
            title:
              type: string
              description: "Main title of the article"
              example: "My Article Title"
            supertitle:
              type: string
              nullable: true
              description: "The supertitle/kicker are 1-2 keywords that denote the context/topic of the article"
              example: "Olympics"
            text:
              type: string
              nullable: true
              description: "Teaser text is a few sentences that summarize/introduce the article"
              example: "This is the teaser text\nIt may contain line breaks."
            url:
              type: string
              # format: uri
              example: "https://www.zeit.de/my/article"
            image:
              $ref: "#/components/schemas/image"
            author_image:
              $ref: "#/components/schemas/image"
            dateFirstPublished:
              type: string
              format: date-time
              description: "Timestamp when the article was published initially"
              example: "2019-12-31T13:12:00Z"
            dateLastPublishedSemantic:
              type: string
              format: date-time
              description: "Timestamp of the most recent semantic/relevant update to the article"
              example: "2020-01-01T13:12:00Z"
            byline:
              type: string
              nullable: true
              description: "Ready-made string that contains the author names and maybe some more information like the article genre"
              example: "Eine Glosse von August Weythershaußen, Erzgebirge"
            badges:
              type: array
              items:
                type: string
                enum:
                  - brandeins
                  - liveblog
                  - liveblog-closed
                  - zett
                  - zplus
                  - zplus-register
                  - zplus-spiele
              description: "List of icon IDs that should be displayed for this teaser"
              example: ["zplus"]
            label:
              type: string
              enum:
                - Anzeige
                - Verlagsangebot
              description: "Additional label to mark teasers with corporate advertising"
              example: "Verlagsangebot"
            comments:
              type: object
              properties:
                count:
                  type: integer
                  description: "Current count of comments for this article"
                url:
                  type: string
                  # format: uri
                  description: "URL directly to the comment area of the article"
                  example: "https://www.zeit.de/my/article#comments"
    CenterpageTeaser:
      description: "A teaser module references/represents an article content object"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
          properties:
            type:
              type: string
              enum:
                - teaser
              example: "teaser"
    CenterpageTeaserGallery:
      description: "A teaser module references/represents a gallery content object"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - gallery
          properties:
            type:
              type: string
              enum:
                - teaser-gallery
              example: "teaser-gallery"
            gallery:
              type: object
              properties:
                label:
                  type: string
                  description: "Label to display gallery content"
                  example: "Fotostrecke"
                imagecount:
                  type: integer
                  minimum: 0
                  description: number of images contained in the image gallery
    CenterpageTeaserVideo:
      description: "A teaser module references/represents a video content object"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - video
          properties:
            type:
              type: string
              enum:
                - teaser-video
              example: "teaser-video"
            video:
              type: object
              properties:
                id:
                  type: string
                  example: "6194436097001"
                # advertising: bool
                # provider: "brightcove"
                # product-id:
                # page-url:
                # series: serienname
    CenterpageTeaserPodcast:
      description: "A teaser module references/represents an article content object with audio"
      allOf:
        - $ref: "#/components/schemas/CenterpageTeaserBase"
        - required:
            - audio
          properties:
            type:
              type: string
              enum:
                - teaser-podcast
              example: "teaser-podcast"
            audio:
              type: object
              properties:
                color:
                  type: string
                  example: "#8ed8a6"
                duration:
                  type: string
                  example: "-00:05:23"
                url:
                  type: string
                  # format: uri
                  description: "URL directly to the audio source"
                  example: "https://cdn.podigee.com/media/podcast_17255_unter_pfarrerstochtern_episode_214511_die_opferung_des_isaak.mp3?v=1588876957&source=webplayer"
                connections:
                  type: array
                  items:
                    $ref: "#/components/schemas/audio_connection"
    CenterpageModuleHTML:
      description: "A non-native module that should be displayed via a web view"
      allOf:
        - $ref: "#/components/schemas/CenterpageElement"
        - required:
            - raw_content
          properties:
            type:
              type: string
              enum:
                - html
              example: "html"
            raw_content:
              type: string
              format: html
              example: "<embed>Anything can happen here.</embed>"
    CenterpageAreaBase:
      description: "CenterPages contain areas, which in turn contain modules"
      allOf:
        - $ref: "#/components/schemas/CenterpageElement"
        - required:
            - layout
            - link
            - title
            - items
          properties:
            layout:
              type: string
            link:
              type: string
              nullable: true
              # format: uri
              description: "A section often links to topic pages etc."
              example: "https://www.zeit.de/thema/coronavirus"
            title:
              type: string
              nullable: true
              example: "This is a simple title"
            items:
              type: array
    CenterpageRegion:
      allOf:
        - $ref: "#/components/schemas/CenterpageAreaBase"
        - properties:
            type:
              type: string
              enum:
                - region
              example: "region"
            layout:
              type: string
              enum:
                - standard
            items:
              type: array
              items:
                $ref: "#/components/schemas/CenterpageArea"
    CenterpageArea:
      allOf:
        - $ref: "#/components/schemas/CenterpageAreaBase"
        - properties:
            type:
              type: string
              enum:
                - area
              example: "area"
            layout:
              type: string
              enum:
                - standard
            items:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/CenterpageTeaser"
                  - $ref: "#/components/schemas/CenterpageTeaserGallery"
                  - $ref: "#/components/schemas/CenterpageTeaserVideo"
                  - $ref: "#/components/schemas/CenterpageTeaserPodcast"
                  - $ref: "#/components/schemas/CenterpageModuleHTML"


    TabDefinitionBase:
      required:
        - id
        - title
        - type
        - icon
      properties:
        id:
          type: string
          description: "ID of the tab"
          example: "justsomeuniquestring"
        title:
          type: string
          minLength: 1
          maxLength: 15
          example: "Start"
        type:
          type: string
          enum:
            - cpView
            - webView
            - menuView
            - storyView
        icon:
          type: string
          example: iconHome
    TabDefinitionCpView:
      allOf:
        - $ref: "#/components/schemas/TabDefinitionBase"
        - required:
            - subMenu
          properties:
            type:
              type: string
              enum:
                - cpView
              example: "cpView"
            subMenu:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MenuEntryNative"
                  - $ref: "#/components/schemas/MenuEntryWeb"
    TabDefinitionWebView:
      allOf:
        - $ref: "#/components/schemas/TabDefinitionBase"
        - properties:
            type:
              type: string
              enum:
                - webView
              example: "webView"
            url:
              # format: uri
              type: string
              example: "https://www.zeit.de/index"
            subMenu:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/MenuEntryNative"
                  - $ref: "#/components/schemas/MenuEntryWeb"
    TabDefinitionMenuView:
      allOf:
        - $ref: "#/components/schemas/TabDefinitionBase"
        - properties:
            type:
              type: string
              enum:
                - menuView
              example: "menuView"
            sections:
              type: array
              items:
                $ref: "#/components/schemas/MenuSection"
    TabDefinitionStoryView:
      allOf:
        - $ref: "#/components/schemas/TabDefinitionBase"
      properties:
        type:
          type: string
          enum:
            - storyView
          example: "storyView"


    MenuSection:
      properties:
        id:
          type: string
          example: "menu-section-1"
        entries:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/MenuEntryNative"
              - $ref: "#/components/schemas/MenuEntryWeb"
              - $ref: "#/components/schemas/MenuEntryBrowser"
    MenuEntryBase:
      required:
        - id
        - title
        - type
      properties:
        id:
          type: string
          example: "menu-entry1"
        title:
          type: string
          example: "Menu Entry Title"
        type:
          type: string
          enum:
            - menuEntryNative
            - menuEntryWeb
            - menuEntryBrowser
    MenuEntryNative:
      allOf:
        - $ref: "#/components/schemas/MenuEntryBase"
        - properties:
            targetId:
              type: string
              example: "some-native-id"
            type:
              type: string
              enum:
                - menuEntryNative
              example: "menuEntryNative"
            cpItem:
              required:
                - id
              properties:
                id:
                  $ref: "#/components/schemas/uuid"
    MenuEntryWeb:
      allOf:
        - $ref: "#/components/schemas/MenuEntryBase"
        - required:
            - url
          properties:
            url:
              type: string
              # format: uri
              example: "https://www.zeit.de/some/webviewurl"
            type:
              type: string
              enum:
                - menuEntryWeb
              example: "menuEntryWeb"
    MenuEntryBrowser:
      allOf:
        - $ref: "#/components/schemas/MenuEntryBase"
        - required:
            - url
          properties:
            url:
              type: string
              example: "https://www.zeit.de/some/browserurl"
            type:
              type: string
              enum:
                - menuEntryBrowser
              example: "menuEntryBrowser"


  securitySchemes:
    default:
      type: http
      scheme: basic
